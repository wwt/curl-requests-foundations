{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cURL & Python Requests Hands-On Study Resources \u00b6 About \u00b6 What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the-UI marathon over, and over, and over; every single time there's a need to make a bulk change . To automate these sorts of workflows, you need to learn to write some form of automation-specific code, and that code needs to interact with IT systems using some form of API, usually a REST API . Overview \u00b6 This repository has a variety of hands-on, step-by-step exercises that will teach you to use cURL and Python Requests to work with REST APIs. Even if you are new to cURL or Python Requests, this walkthrough will help you learn the syntax for both tools and get you comfortable with REST API calls to several Cisco platforms, including: ACI DNA Center Meraki vManage SD-WAN Webex Each of these REST APIs uses different authentication mechanisms, URI endpoints, and payload formats, so you will learn to work with REST APIs in a variety of different ways. Even if you're thinking, \"I don't work with Cisco products, why should I care about Cisco APIs?\" If you complete the hands-on exercises in this repository, you will be able to work with just about any REST API, which means you will have some mega automation superpowers . You'll get the most from the hands-on exercises if you have at least a little bit of exposure to Python fundamentals, although we put the step-by-step directions together in a way that welcomes all experience levels. Getting Started \u00b6 It's time to get started with cURL and Python Requests . Click here to move to the next section.","title":"cURL & Python Requests Hands-On Resources"},{"location":"#curl-python-requests-hands-on-study-resources","text":"","title":"cURL &amp; Python Requests Hands-On Study Resources"},{"location":"#about","text":"What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the-UI marathon over, and over, and over; every single time there's a need to make a bulk change . To automate these sorts of workflows, you need to learn to write some form of automation-specific code, and that code needs to interact with IT systems using some form of API, usually a REST API .","title":" About"},{"location":"#overview","text":"This repository has a variety of hands-on, step-by-step exercises that will teach you to use cURL and Python Requests to work with REST APIs. Even if you are new to cURL or Python Requests, this walkthrough will help you learn the syntax for both tools and get you comfortable with REST API calls to several Cisco platforms, including: ACI DNA Center Meraki vManage SD-WAN Webex Each of these REST APIs uses different authentication mechanisms, URI endpoints, and payload formats, so you will learn to work with REST APIs in a variety of different ways. Even if you're thinking, \"I don't work with Cisco products, why should I care about Cisco APIs?\" If you complete the hands-on exercises in this repository, you will be able to work with just about any REST API, which means you will have some mega automation superpowers . You'll get the most from the hands-on exercises if you have at least a little bit of exposure to Python fundamentals, although we put the step-by-step directions together in a way that welcomes all experience levels.","title":" Overview"},{"location":"#getting-started","text":"It's time to get started with cURL and Python Requests . Click here to move to the next section.","title":" Getting Started"},{"location":"sections/section_1/","text":"REST API Access With cURL \u00b6 cURL Overview \u00b6 cURL is an open-source Linux tool that allows your CLI to act as an HTTP client 1 Think of cURL sort of like a text-based web browser that you can use to do things like: Test and troubleshoot HTTP connectivity to a server. Interact with REST APIs. Download or upload files. Test certificate validity. cURL In Action \u00b6 Because the native response format for cURL is unstructured text 2 , cURL typically is not part of programmatic workflows. However, cURL has a wide variety of use cases and is an essential part of your development skillset. cURL Example Here is a quick example of how cURL can make a REST API call to a free, public service that provides a REST API test platform: You can paste this cURL command in just about any Linux environment and press Enter or Return to send the request: Example cURL Command bash curl https://jsonplaceholder.typicode.com/posts/1 The response from the server should look something like this: Example Server Response bash { \"userId\": 1, \"id\": 1, \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\", \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\" } cURL Command Option Reference \u00b6 cURL and a slew of configuration options, and you can find a reference for some of the more common options below: cURL Command Options Option Shorthand Purpose --request -X HTTP request method - GET 3 , POST , PUT , PATCH , DELETE --header -H HTTP client header(s) in key/value pairs - \"Content:application/json\" --url <url> N/A Request URL --cookie-jar <file_name> c Write session cookies to a local file --cookie <file_name> -b Send session cookies stored in a local file --data , --data-raw , and --data-urlencode -d HTTP request body, typically for POST , PUT , and PATCH methods --include -i Display the response headers and response body in STDOUT --head -I Display ONLY the response headers in STDOUT --insecure -k Allow insecure or self-signed certificates (insecure TLS) --location -L Follow HTTP 3XX redirect server responses --output <file_name> -o <file_name> Write response to a file, instead of STDOUT --user -u HTTP Basic Auth credentials in a key/value pair - \"user_name:password\" --verbose -v Display detailed info for debugging (headers, TLS handshake messages, etc.) Moving On \u00b6 You have the basics of cURL now, and it's time to take a look at Python Requests . Click here to move to the next section. cURL supports many more protocols than HTTP, and those protocols are beyond the scope of this repository. \u21a9 Tools like JQ , for example, can format JSON text into structured data. \u21a9 Default, when omitted. \u21a9","title":"REST API Access With cURL"},{"location":"sections/section_1/#rest-api-access-with-curl","text":"","title":"REST API Access With cURL"},{"location":"sections/section_1/#curl-overview","text":"cURL is an open-source Linux tool that allows your CLI to act as an HTTP client 1 Think of cURL sort of like a text-based web browser that you can use to do things like: Test and troubleshoot HTTP connectivity to a server. Interact with REST APIs. Download or upload files. Test certificate validity.","title":" cURL Overview"},{"location":"sections/section_1/#curl-in-action","text":"Because the native response format for cURL is unstructured text 2 , cURL typically is not part of programmatic workflows. However, cURL has a wide variety of use cases and is an essential part of your development skillset. cURL Example Here is a quick example of how cURL can make a REST API call to a free, public service that provides a REST API test platform: You can paste this cURL command in just about any Linux environment and press Enter or Return to send the request: Example cURL Command bash curl https://jsonplaceholder.typicode.com/posts/1 The response from the server should look something like this: Example Server Response bash { \"userId\": 1, \"id\": 1, \"title\": \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\", \"body\": \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\" }","title":" cURL In Action"},{"location":"sections/section_1/#curl-command-option-reference","text":"cURL and a slew of configuration options, and you can find a reference for some of the more common options below: cURL Command Options Option Shorthand Purpose --request -X HTTP request method - GET 3 , POST , PUT , PATCH , DELETE --header -H HTTP client header(s) in key/value pairs - \"Content:application/json\" --url <url> N/A Request URL --cookie-jar <file_name> c Write session cookies to a local file --cookie <file_name> -b Send session cookies stored in a local file --data , --data-raw , and --data-urlencode -d HTTP request body, typically for POST , PUT , and PATCH methods --include -i Display the response headers and response body in STDOUT --head -I Display ONLY the response headers in STDOUT --insecure -k Allow insecure or self-signed certificates (insecure TLS) --location -L Follow HTTP 3XX redirect server responses --output <file_name> -o <file_name> Write response to a file, instead of STDOUT --user -u HTTP Basic Auth credentials in a key/value pair - \"user_name:password\" --verbose -v Display detailed info for debugging (headers, TLS handshake messages, etc.)","title":" cURL Command Option Reference"},{"location":"sections/section_1/#moving-on","text":"You have the basics of cURL now, and it's time to take a look at Python Requests . Click here to move to the next section. cURL supports many more protocols than HTTP, and those protocols are beyond the scope of this repository. \u21a9 Tools like JQ , for example, can format JSON text into structured data. \u21a9 Default, when omitted. \u21a9","title":" Moving On"},{"location":"sections/section_2/","text":"REST API Access With Python Requests \u00b6 Python Requests \u00b6 Python Requests is a third-party 1 tool that allows you to write simple, human-readable REST API calls in Python. Although the Python Standard Library contains a module that can make REST API calls 2 , official Python documentation recommends the use of the Python Requests module because of its higher-level, more consumable interface. Python Requests is an excellent tool for doing things like: Obtaining configuration and state information from a variety of REST-based IT systems. Sending configuration changes to different REST APIs. Automatically managing HTTP session state. Using simple keywords to convert Python objects into HTTP/REST API-compatible formats automatically. Converting server response data into Python objects. Managing HTTP exceptions. Building REST API interactions into your automated workflows. Python Requests In Action \u00b6 For the most part, only your imagination limits what you can do with REST APIs and Python Requests . Because of Python's programmatic flexibility, you can automate just about any task exposed by REST APIs. Knowing how to use Python Requests is a skill that will help you automate both complex and straightforward workflows. Python Requests Example Here is a quick example of how Python Requests can make a REST API call to a free, public service that provides a REST API test platform: You can paste this Python Requests code into a Python 3.x interpreter and press Enter or Return to send the request: Example Python Requests Command python import requests req_url = 'https://jsonplaceholder.typicode.com/posts/1' req_headers = {'Content-Type':'application/json'} response = requests.get(req_url, headers=req_headers) print(f'{response.status_code} {response.reason}') print(response.json()) The response from the server should look something like this: Example Server Response python 200 OK {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'} Python Requests Parameters Reference \u00b6 Python Requests has many parameters and you can find a reference for some of the more common parameters and keywords below: Python Requests Parameters Parameter Class Description method str HTTP request method 3 - GET , POST , PUT , PATCH , DELETE url str Request URL 3 data dict Form-encoded HTTP request body, typically for POST , PUT , and PATCH methods json dict JSON-encoded HTTP request body, typically for POST , PUT , and PATCH methods headers dict HTTP client header(s) in key/value pairs - {\"Content\": \"application/json\"} cookies dict or CookieJar HTTP cookies in key/value pairs - {\"Session_Token\": \"1234567890\"} auth tuple HTTP Basic Auth credentials in a key/value pair - (\"user_name\", \"password\") timeout float or tuple Number of seconds to wait for the server to respond to a request 4 verify bool Allow insecure or self-signed certificates (insecure TLS) 5 Python Requests Response Object Reference \u00b6 The response from a Python Requests request is an object with many attributes and methods. The data available in the Response object will help you understand whether or not your REST API call was successful and give you detailed information, often in a structured data format, that you can use programmatically. You can find a reference for some of the more common attributes and methods below: Python Requests Response Object Attributes & Methods 6 Name Return Object Description cookies CookieJar Cookies returned by the server headers dict Response headers from the server json() dict JSON-encoded response body from the server links dict And links found within the response header from the server ok bool True if the HTTP status code is < 400 , False if the HTTP status code is >= 400 raise_for_status() HTTPError Raise an Exception of the HTTPError type, if the HTTP status code is >= 400 reason str HTTP reason text - OK , Not Found , Bad Request , etc. status_code str HTTP status code - 200 , 404 , 400 , etc. text str Unicode-encoded response body from the server url str Final URL location of the server response, including redirects Keep Rolling \u00b6 You have all of the information you need to get started with the hands-on exercises. Click here to move to the next section. Installed with the Python pip Package Management Tool . \u21a9 Python urllib module . \u21a9 Required parameter. \u21a9 \u21a9 Default timeout is unlimited and, although not required, should be set. \u21a9 Default is True . \u21a9 Any item in the table below with trailing () characters is a method and all other items are attributes . \u21a9","title":"REST API Access With Python Requests"},{"location":"sections/section_2/#rest-api-access-with-python-requests","text":"","title":"REST API Access With Python Requests"},{"location":"sections/section_2/#python-requests","text":"Python Requests is a third-party 1 tool that allows you to write simple, human-readable REST API calls in Python. Although the Python Standard Library contains a module that can make REST API calls 2 , official Python documentation recommends the use of the Python Requests module because of its higher-level, more consumable interface. Python Requests is an excellent tool for doing things like: Obtaining configuration and state information from a variety of REST-based IT systems. Sending configuration changes to different REST APIs. Automatically managing HTTP session state. Using simple keywords to convert Python objects into HTTP/REST API-compatible formats automatically. Converting server response data into Python objects. Managing HTTP exceptions. Building REST API interactions into your automated workflows.","title":" Python Requests"},{"location":"sections/section_2/#python-requests-in-action","text":"For the most part, only your imagination limits what you can do with REST APIs and Python Requests . Because of Python's programmatic flexibility, you can automate just about any task exposed by REST APIs. Knowing how to use Python Requests is a skill that will help you automate both complex and straightforward workflows. Python Requests Example Here is a quick example of how Python Requests can make a REST API call to a free, public service that provides a REST API test platform: You can paste this Python Requests code into a Python 3.x interpreter and press Enter or Return to send the request: Example Python Requests Command python import requests req_url = 'https://jsonplaceholder.typicode.com/posts/1' req_headers = {'Content-Type':'application/json'} response = requests.get(req_url, headers=req_headers) print(f'{response.status_code} {response.reason}') print(response.json()) The response from the server should look something like this: Example Server Response python 200 OK {'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'}","title":" Python Requests In Action"},{"location":"sections/section_2/#python-requests-parameters-reference","text":"Python Requests has many parameters and you can find a reference for some of the more common parameters and keywords below: Python Requests Parameters Parameter Class Description method str HTTP request method 3 - GET , POST , PUT , PATCH , DELETE url str Request URL 3 data dict Form-encoded HTTP request body, typically for POST , PUT , and PATCH methods json dict JSON-encoded HTTP request body, typically for POST , PUT , and PATCH methods headers dict HTTP client header(s) in key/value pairs - {\"Content\": \"application/json\"} cookies dict or CookieJar HTTP cookies in key/value pairs - {\"Session_Token\": \"1234567890\"} auth tuple HTTP Basic Auth credentials in a key/value pair - (\"user_name\", \"password\") timeout float or tuple Number of seconds to wait for the server to respond to a request 4 verify bool Allow insecure or self-signed certificates (insecure TLS) 5","title":" Python Requests Parameters Reference"},{"location":"sections/section_2/#python-requests-response-object-reference","text":"The response from a Python Requests request is an object with many attributes and methods. The data available in the Response object will help you understand whether or not your REST API call was successful and give you detailed information, often in a structured data format, that you can use programmatically. You can find a reference for some of the more common attributes and methods below: Python Requests Response Object Attributes & Methods 6 Name Return Object Description cookies CookieJar Cookies returned by the server headers dict Response headers from the server json() dict JSON-encoded response body from the server links dict And links found within the response header from the server ok bool True if the HTTP status code is < 400 , False if the HTTP status code is >= 400 raise_for_status() HTTPError Raise an Exception of the HTTPError type, if the HTTP status code is >= 400 reason str HTTP reason text - OK , Not Found , Bad Request , etc. status_code str HTTP status code - 200 , 404 , 400 , etc. text str Unicode-encoded response body from the server url str Final URL location of the server response, including redirects","title":" Python Requests Response Object Reference"},{"location":"sections/section_2/#keep-rolling","text":"You have all of the information you need to get started with the hands-on exercises. Click here to move to the next section. Installed with the Python pip Package Management Tool . \u21a9 Python urllib module . \u21a9 Required parameter. \u21a9 \u21a9 Default timeout is unlimited and, although not required, should be set. \u21a9 Default is True . \u21a9 Any item in the table below with trailing () characters is a method and all other items are attributes . \u21a9","title":" Keep Rolling"},{"location":"sections/section_3/","text":"Hands-On Exercises \u00b6 Lab Overview \u00b6 The lab environment runs in a Docker Container and contains references for all of the cURL scripts and Python Requests code that you will build. A PowerPoint Presentation file will guide you through each of the following exercises: cURL Introduction. Python Requests Introduction. ACI 1 DNAC 1 Meraki 1 vManage SD-WAN 1 Webex 1 Lab Requirements \u00b6 You only need a few things to start working through the hands-on exercises: A Docker runtime environment. Docker Desktop for Windows or macOS Docker for Linux . An IDE tool 2 . We recommend Visual Studio Code . A terminal program. Visual Studio Code Integrated Terminal . Microsoft PowerShell . macOS Terminal application . Microsoft PowerPoint . Lab Setup Instructions \u00b6 Follow these steps to set up the hands-on lab environment: Lab Setup Directions Attention This option assumes you have an operational Docker runtime environment and that your Docker daemon can connect to and download images from Docker Hub . The screenshots in the directions represent an example from a macOS Terminal , and the same commands and procedures also work with Windows PowerShell . Step 1 Copy the following command to your clipboard. bash docker run -it --name curl-pyreq1 wwt01/curl-pyreq Open a terminal shell on the same system as your Docker runtime environment. Paste the command into your terminal shell. Press your Enter or Return key to run the command. Tip You will know your Container is active and ready for use when your terminal prompt changes to something like this: bash root@da343f292e5a:/code# Docker Command Details The Docker Command performs the following actions: Downloads the wwt01/curl-pyreq Docker Image from Docker Hub . Creates a new Docker Container with the name curl-pyreq1 Attaches to the Container shell. Step 2 Click the botton below to download the instructional Microsoft PowerPoint slides: Download Presentation Step 3 Open the PowerPoint Presentation. Step 4 Complete each of the exercises, in sequence: The slides provide command examples for you to follow: The presenter notes provide step-by-step instructions to guide you through each slide and exercise. After each cURL command entry or Python Requests code run, a slide with a screen recording will show you what you should expect to see: Enter the cURL command examples in your Container prompt. Use the Container's Python REPL to enter the Python Request code examples. Attention There may be some slight variances between the output in the screen recordings and the output in your Docker environment, although each of the cURL commands and Python Requests code blocks should run successfully. Lab Environment Shutdown and Restart To shut down the lab environment, from your terminal window press Ctrl + D and wait for the terminal prompt to change back to its standard development computer prompt. Lab Environment Docker Command Reference Use the following commands to manage your Docker lab environment: Restart an existing lab environment Container (restores previous lab progress): bash docker start curl-pyreq1 Delete an existing lab environment Container (removes previous lab progress): bash docker stop curl-pyreq1 docker rm curl-pyreq1 Remove the Docker Image: bash docker stop curl-pyreq1 docker rm curl-pyreq1 docker rmi wwt01/curl-pyreq Tips \u00b6 Start the PowerPoint presentation in slide show mode for an authentic step-by-step walkthrough experience. Slide animations will advance through a series of small, more consumable steps. If you have a second monitor, you can click through the slide show and read the instructions in the presentation script simultaneously. The Git repository includes a resources directory where you can find subdirectories, organized by topic and REST API platform. All of the shell scripts and Python code in the PowerPoint slides, are in curl and python subdirectories. Both the curl and python directories contain subdirectories for each section of the presentation (examples, ACI, DNAC, etc.). Keep the Git repository open in a browser window if you want a quick reference for any of the cURL commands or Python Requests code. Feedback, Issues, & Contributions \u00b6 What can you do you need some help? If you: Run into a problem with the lab. Have a question about the presentation content. Want to make a suggestion Want to make your own contribution to this project. Please , open an Issue or create a Pull Request . This repository is a community project, and your feedback will make the learning experience better for you and those who follow you in their learning journeys. Includes the following sub-sections: Platform-Specific API Overview, cURL REST API exercises, and Python Requests REST API exercises. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Optional. You may use the Python REPL in the Docker Container to enter the Python Requests code examples. \u21a9","title":"Hands-On Exercises"},{"location":"sections/section_3/#hands-on-exercises","text":"","title":"Hands-On Exercises"},{"location":"sections/section_3/#lab-overview","text":"The lab environment runs in a Docker Container and contains references for all of the cURL scripts and Python Requests code that you will build. A PowerPoint Presentation file will guide you through each of the following exercises: cURL Introduction. Python Requests Introduction. ACI 1 DNAC 1 Meraki 1 vManage SD-WAN 1 Webex 1","title":" Lab Overview"},{"location":"sections/section_3/#lab-requirements","text":"You only need a few things to start working through the hands-on exercises: A Docker runtime environment. Docker Desktop for Windows or macOS Docker for Linux . An IDE tool 2 . We recommend Visual Studio Code . A terminal program. Visual Studio Code Integrated Terminal . Microsoft PowerShell . macOS Terminal application . Microsoft PowerPoint .","title":" Lab Requirements"},{"location":"sections/section_3/#lab-setup-instructions","text":"Follow these steps to set up the hands-on lab environment: Lab Setup Directions Attention This option assumes you have an operational Docker runtime environment and that your Docker daemon can connect to and download images from Docker Hub . The screenshots in the directions represent an example from a macOS Terminal , and the same commands and procedures also work with Windows PowerShell . Step 1 Copy the following command to your clipboard. bash docker run -it --name curl-pyreq1 wwt01/curl-pyreq Open a terminal shell on the same system as your Docker runtime environment. Paste the command into your terminal shell. Press your Enter or Return key to run the command. Tip You will know your Container is active and ready for use when your terminal prompt changes to something like this: bash root@da343f292e5a:/code# Docker Command Details The Docker Command performs the following actions: Downloads the wwt01/curl-pyreq Docker Image from Docker Hub . Creates a new Docker Container with the name curl-pyreq1 Attaches to the Container shell. Step 2 Click the botton below to download the instructional Microsoft PowerPoint slides: Download Presentation Step 3 Open the PowerPoint Presentation. Step 4 Complete each of the exercises, in sequence: The slides provide command examples for you to follow: The presenter notes provide step-by-step instructions to guide you through each slide and exercise. After each cURL command entry or Python Requests code run, a slide with a screen recording will show you what you should expect to see: Enter the cURL command examples in your Container prompt. Use the Container's Python REPL to enter the Python Request code examples. Attention There may be some slight variances between the output in the screen recordings and the output in your Docker environment, although each of the cURL commands and Python Requests code blocks should run successfully. Lab Environment Shutdown and Restart To shut down the lab environment, from your terminal window press Ctrl + D and wait for the terminal prompt to change back to its standard development computer prompt. Lab Environment Docker Command Reference Use the following commands to manage your Docker lab environment: Restart an existing lab environment Container (restores previous lab progress): bash docker start curl-pyreq1 Delete an existing lab environment Container (removes previous lab progress): bash docker stop curl-pyreq1 docker rm curl-pyreq1 Remove the Docker Image: bash docker stop curl-pyreq1 docker rm curl-pyreq1 docker rmi wwt01/curl-pyreq","title":" Lab Setup Instructions"},{"location":"sections/section_3/#tips","text":"Start the PowerPoint presentation in slide show mode for an authentic step-by-step walkthrough experience. Slide animations will advance through a series of small, more consumable steps. If you have a second monitor, you can click through the slide show and read the instructions in the presentation script simultaneously. The Git repository includes a resources directory where you can find subdirectories, organized by topic and REST API platform. All of the shell scripts and Python code in the PowerPoint slides, are in curl and python subdirectories. Both the curl and python directories contain subdirectories for each section of the presentation (examples, ACI, DNAC, etc.). Keep the Git repository open in a browser window if you want a quick reference for any of the cURL commands or Python Requests code.","title":" Tips"},{"location":"sections/section_3/#feedback-issues-contributions","text":"What can you do you need some help? If you: Run into a problem with the lab. Have a question about the presentation content. Want to make a suggestion Want to make your own contribution to this project. Please , open an Issue or create a Pull Request . This repository is a community project, and your feedback will make the learning experience better for you and those who follow you in their learning journeys. Includes the following sub-sections: Platform-Specific API Overview, cURL REST API exercises, and Python Requests REST API exercises. \u21a9 \u21a9 \u21a9 \u21a9 \u21a9 Optional. You may use the Python REPL in the Docker Container to enter the Python Requests code examples. \u21a9","title":" Feedback, Issues, &amp; Contributions"}]}
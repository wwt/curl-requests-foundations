{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"cURL & Python Requests Hands-On Study Resources \u00b6 About \u00b6 What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the- UI marathon over, and over, and over... every single time there's a need to make a bulk change . To automate these sorts of workflows, you need to learn to write some form of automation-specific code, and that code needs to interact with IT systems using some form of API , usually a REST API . Overview \u00b6 This repository has a variety of hands-on, step-by-step exercies that will teach you to use cURL and Python Requests to work with REST APIs . Even if you are new to cURL or Python Requests, this walkthrough will help you learn the syntax for both tools and get you comfortable with REST API calls to several Cisco platforms, including: ACI DNA Center Meraki vManage SD-WAN Webex Each of these REST APIs uses different authentication mechanisms, URI endpoints, and payload formats, so you will learn to work REST APIs in a variety of different ways. Even if you're thinking, \"I don't work with Cisco products, why should I care about Cisco APIs ?\" If you complete the hands-on exercises in this repository, you should be able to work with just about any REST API , which means you will have some mega automation superpowers. You'll get the most from the hands-on exercises if you have at least a little bit of exposure to Python fundamentals, although we put the step-by-step directions together in a way that welcomes all experience levels. REST API Tools \u00b6 // TODO Getting Started \u00b6 // TODO To use this repo: Use this command in your terminal shell to create a local directory to hose the Git repository files: # Create and switch to a local directory # macOS/Linux mkdir ~/code && cd ~/code # Windows PowerShell mkdir ~/code ; cd ~/code Download the repo files in one of two ways: Use Git to clone the repo to your computer using either HTTP or SSH : HTTP - git clone https://github.com/wwt/curl-requests-foundations.git SSH - git clone git@github.com:wwt/curl-requests-foundations.git If you don't have access to or don't know how to use Git, you can download the repo files at: https://github.com/wwt/curl-requests-foundations/archive/main.zip Use an archiving tool to extract the file main.zip . You should now have a folder on your computer which contains the Git repository files. Open Git repository folder on your computer and then locate and open the PowerPoint presentation curl-requests-foundations.pptx . Start the presentation in slide show mode for a walkthrough experience. I use animation to help deliver the topics in small chunks, and much of the presentation will look like a mess if you don't navigate the animation in slide show mode. The hands-on sections of the presentation list all of the cURL and Python commands you need to follow along with each task, and there are also screen recordings that demonstrate each task. I include presenter notes on every slide, and if you have a second monitor, you can click through the slide show and read the script simultaneously. Install Docker Desktop: https://www.docker.com/products/docker-desktop Use this command in your terminal shell to create a Docker Container for the hands-on activities: # Run the Docker Container docker container run -it --name curl-pyreq1 wwt01/curl-pyreq **Note - your terminal prompt will change to /code# to indicate the Container is active. Change the working directory in your Container to that of the downloaded Git repository files: # List your directories and locate the name of the Git repository folder ls -l # Unless you specifically renamed the folder, this command will change you to the correct directory cd curl-requests-foundations The Git repository includes subfolders that contain reference files and scripts for the hands-on portion of the slide show. The resources folder contains: All of the shell scripts and Python code in the PowerPoint slides, within curl and python subdirectories. Both the curl and python directories contain subdirectories for each section of the presentation (examples, ACI , DNAC, etc.). Contributions \u00b6 // TODO","title":"cURL & Python Requests Hands-On Resources"},{"location":"#curl-python-requests-hands-on-study-resources","text":"","title":"cURL &amp; Python Requests Hands-On Study Resources"},{"location":"#about","text":"What's the big fuss over IT automation? Well, more than anything, the excitement is about the sorts of things that you don't have to do when automation is on your side. Things like not having to either copy and paste configuration changes to dozens (maybe hundreds) of different systems or repeat the same click, click, click, click, click-through-the- UI marathon over, and over, and over... every single time there's a need to make a bulk change . To automate these sorts of workflows, you need to learn to write some form of automation-specific code, and that code needs to interact with IT systems using some form of API , usually a REST API .","title":" About"},{"location":"#overview","text":"This repository has a variety of hands-on, step-by-step exercies that will teach you to use cURL and Python Requests to work with REST APIs . Even if you are new to cURL or Python Requests, this walkthrough will help you learn the syntax for both tools and get you comfortable with REST API calls to several Cisco platforms, including: ACI DNA Center Meraki vManage SD-WAN Webex Each of these REST APIs uses different authentication mechanisms, URI endpoints, and payload formats, so you will learn to work REST APIs in a variety of different ways. Even if you're thinking, \"I don't work with Cisco products, why should I care about Cisco APIs ?\" If you complete the hands-on exercises in this repository, you should be able to work with just about any REST API , which means you will have some mega automation superpowers. You'll get the most from the hands-on exercises if you have at least a little bit of exposure to Python fundamentals, although we put the step-by-step directions together in a way that welcomes all experience levels.","title":" Overview"},{"location":"#rest-api-tools","text":"// TODO","title":" REST API Tools"},{"location":"#getting-started","text":"// TODO To use this repo: Use this command in your terminal shell to create a local directory to hose the Git repository files: # Create and switch to a local directory # macOS/Linux mkdir ~/code && cd ~/code # Windows PowerShell mkdir ~/code ; cd ~/code Download the repo files in one of two ways: Use Git to clone the repo to your computer using either HTTP or SSH : HTTP - git clone https://github.com/wwt/curl-requests-foundations.git SSH - git clone git@github.com:wwt/curl-requests-foundations.git If you don't have access to or don't know how to use Git, you can download the repo files at: https://github.com/wwt/curl-requests-foundations/archive/main.zip Use an archiving tool to extract the file main.zip . You should now have a folder on your computer which contains the Git repository files. Open Git repository folder on your computer and then locate and open the PowerPoint presentation curl-requests-foundations.pptx . Start the presentation in slide show mode for a walkthrough experience. I use animation to help deliver the topics in small chunks, and much of the presentation will look like a mess if you don't navigate the animation in slide show mode. The hands-on sections of the presentation list all of the cURL and Python commands you need to follow along with each task, and there are also screen recordings that demonstrate each task. I include presenter notes on every slide, and if you have a second monitor, you can click through the slide show and read the script simultaneously. Install Docker Desktop: https://www.docker.com/products/docker-desktop Use this command in your terminal shell to create a Docker Container for the hands-on activities: # Run the Docker Container docker container run -it --name curl-pyreq1 wwt01/curl-pyreq **Note - your terminal prompt will change to /code# to indicate the Container is active. Change the working directory in your Container to that of the downloaded Git repository files: # List your directories and locate the name of the Git repository folder ls -l # Unless you specifically renamed the folder, this command will change you to the correct directory cd curl-requests-foundations The Git repository includes subfolders that contain reference files and scripts for the hands-on portion of the slide show. The resources folder contains: All of the shell scripts and Python code in the PowerPoint slides, within curl and python subdirectories. Both the curl and python directories contain subdirectories for each section of the presentation (examples, ACI , DNAC, etc.).","title":" Getting Started"},{"location":"#contributions","text":"// TODO","title":" Contributions"},{"location":"sections/section_1/","text":"Section 1 \u00b6","title":"Section 1"},{"location":"sections/section_1/#section-1","text":"","title":"Section 1"},{"location":"sections/section_2/","text":"Section 2 \u00b6","title":"Section 2"},{"location":"sections/section_2/#section-2","text":"","title":"Section 2"},{"location":"sections/section_3/","text":"Section 3 \u00b6","title":"Section 3"},{"location":"sections/section_3/#section-3","text":"","title":"Section 3"}]}